include("../ManifoldDiffusions.jl/src/ManifoldDiffusions.jl")
using StaticArrays, LinearAlgebra, Plots
using Bridge
using Main.ManifoldDiffusions
using Einsum
#include("../GuidedProposals/GuidedProposals.jl")
const ‚Ñù{N} = SVector{N, Float64}
T = 1.0
dt = 1/1000
œÑ(T) = (x) -> x*(2-x/T)
tt = œÑ(T).(0.:dt:T)

L = SMatrix{3,3}(1.0I)
Œ£diagel = 10^(-3)
Œ£ = SMatrix{3,3}(Œ£diagel*I)

extractcomp(v, i) = map(x->x[i], v)


T = 1.0
dt = 1/1000
œÑ(T) = (x) -> x*(2-x/T)
tt = œÑ(T).(0.:dt:T)

L = SMatrix{3,3}(1.0I)
Œ£diagel = 10^(-3)
Œ£ = SMatrix{3,3}(Œ£diagel*I)

extractcomp(v, i) = map(x->x[i], v)


S = Sphere(2, 1.0)
x‚ÇÄ = [0.0,-1.0,0.0]
ŒΩ‚ÇÅ = ManifoldDiffusions.Dœï(x‚ÇÄ, 1, S)*[1.,0.,0.]
ŒΩ‚ÇÇ = ManifoldDiffusions.Dœï(x‚ÇÄ, 1, S)*[0.,0.,1.]
u‚ÇÄ = Frame(œï(x‚ÇÄ,1,S), [1.0 0.0 ; 0.0 -1.0],1, S)
W = sample(tt, Wiener{‚Ñù{2}}())
UU = StochasticDevelopment(Heun(), W, u‚ÇÄ)

# charts = map(u -> u.n, UU.yy)
# plot(UU.tt, charts)
XX = map(u->œï‚Åª¬π(u.q, u.n ,u.‚Ñ≥), UU.yy)
plotly()
SpherePlot(extractcomp(XX,1), extractcomp(XX,2), extractcomp(XX,3), S)

struct SphereAngularBM <: ContinuousTimeProcess{‚Ñù{2}}
end

struct SphereStereoBM1 <: ContinuousTimeProcess{‚Ñù{2}} 
end

struct SphereStereoBM2 <: ContinuousTimeProcess{‚Ñù{2}}
end


function F‚ÇÅ(x)
    u, v = x[1], x[2]
    return [2*u/(u^2+v^2+1), 2*v/(u^2+v^2+1), (u^2+v^2-1)/(u^2+v^2+1)]
end

function F‚ÇÇ(x)
    u, v = x[1], x[2]
    return [sin(u)*cos(v), sin(u)*sin(v), cos(u)]
end

function Bridge.b(t,x,P::SphereStereoBM1) 
    gx = ManifoldDiffusions.g‚ôØ(x,1,S)
    _Œì = ManifoldDiffusions.Œì(x,1,S)
    @einsum out[i] := -0.5*gx[j,k]*_Œì[i,j,k]
    return out
    # u,v = x[1],x[2]
    # return [(u^2+v^2+1)*(u-v)/4, 0.0]
    #[ 0.0 , 1/(2*tan(x[2]))]
end
   
#Bridge.œÉ(t,x,P::SphereAngularBM) = [1/abs(sin(x[2])) 0.0 ; 0.0 1.0]
function Bridge.œÉ(t,x,P::SphereStereoBM1)
    gx = ManifoldDiffusions.g‚ôØ(x,1,S)
    return cholesky(gx).U
    # return [2/(u^2+v^2+1) 0.0 ; 0.0 2/(u^2+v^2+1)]
end

function Bridge.b(t,x,P::SphereStereoBM2)
    u,v = x[1],x[2]
    # return [(u^2+v^2+1)*(u-v)/4, 0.0]
    return [0.,0.]
end
   
function Bridge.œÉ(t,x,P::SphereStereoBM2)
    u,v = x[1],x[2]
    return [(u^2+v^2+1)/2 0.0 ; 0.0 (u^2+v^2+1)/2]
end

S = Sphere(2, 1.0)
P1 = SphereStereoBM1()
P2 = SphereStereoBM2()
# W = sample(tt, Wiener{‚Ñù{2}}())

YS1 = Bridge.solve(Euler(), [0.0, -1.0], W, P1)
YS2 = Bridge.solve(Euler(), [0.0, -1.0], W, P2)
XS1 = map(y->F‚ÇÅ(y), YS1.yy)
XS2 = map(y->F‚ÇÅ(y), YS2.yy)
XS11 = extractcomp(XS1, 1) ; XS12 = extractcomp(XS1,2) ; XS13 = extractcomp(XS1,3)
XS21 = extractcomp(XS1, 1) ; XS22 = extractcomp(XS1,2) ; XS23 = extractcomp(XS1,3)

# = cos.(YA1).*sin.(YA2) ; XA2 = sin.(YA1).*sin.(YA2) ; XA3 = cos.(YA2)
plotly()
SpherePlot(XS11, XS12,XS13, S)
#SpherePlot(XS21, XS22,XS23, S)



struct FrameBM <: ContinuousTimeProcess{‚Ñù{6}}
end

Bridge.b(t,u,P::FrameBM) = zero(u)
function Bridge.œÉ(t,u,P::FrameBM)
    d = Int64(0.5*sqrt(1+4*length(u))-0.5)
    q = u[1:d]
    ŒΩ = reshape(u[d+1:end],d,d)
    _Œì = ManifoldDiffusions.Œì(q,1,S)
    dq = ŒΩ
    @einsum dŒΩ[i,j,m] := -0.5*_Œì[i,k,l]*ŒΩ[k,m]*ŒΩ[l,j]
    return vcat(dq, dŒΩ[:,1,:], dŒΩ[:,2,:])
end

u‚ÇÄ = [0.0, -1.0, 1. ,0., 0. ,-1.]
UU2 = Bridge.solve(StochasticHeun(), u‚ÇÄ, W, FrameBM())

XF = map(x -> ManifoldDiffusions.œï‚Åª¬π(x[1:2],1,S), UU2.yy[1:end-1])
XF1 = extractcomp(XF, 1) ; XF2 = extractcomp(XF,2) ; XF3 = extractcomp(XF,3)
SpherePlot(XF1,XF2,XF3,S)










function integratestep(dZ,x,n)
    d = Int64(0.5*sqrt(1+4*length(x))-0.5)
    q = x[1:d]
    ŒΩ = reshape(x[d+1:end],d,d)
    _Œì = ManifoldDiffusions.Œì(q,1,S)
    @einsum q·¥±[i] := q[i] + ŒΩ[i,j]*dZ[j] 
    @einsum ŒΩ·¥±[i,j] := ŒΩ[i,j] - _Œì[i,k,l]*ŒΩ[k,m]*ŒΩ[l,j]*dZ[m]
    _Œì·¥± = ManifoldDiffusions.Œì(q·¥±, n, S)
    @einsum qNew[i] := q[i] + 0.5*(ŒΩ·¥±[i,j]+ŒΩ[i,j])*dZ[j]
    @einsum ŒΩNew[i,j] := ŒΩ[i,j] - 0.5*(_Œì·¥±[i,k,l]*ŒΩ·¥±[k,m]*ŒΩ·¥±[l,j]+ _Œì[i,k,l]*ŒΩ[k,m]*ŒΩ[l,j])*dZ[m]
    return vcat(qNew, ŒΩNew[:,1], ŒΩNew[:,2])
end

u‚ÇÄ = [0.0, -1.0, 1. ,0., 0. ,-1.]
uu = [u‚ÇÄ]
ww = W.yy ; tt = W.tt
for k in 1:length(tt)-1
    dw = ww[k+1]-ww[k]
    push!(uu, integratestep(dw, uu[k],1))
end
U = Bridge.samplepath(W.tt, uu)


x‚ÇÄ = [1.0,0.0,0.0]
u‚ÇÄ = Frame(x‚ÇÄ, [0.0 1.0 ; 1.0 0.0], S)
UU = StochasticDevelopment(W, u‚ÇÄ, S)

XX = map(u->u.x, UU.yy)
plotly()
SpherePlot(extractcomp(XX,1), extractcomp(XX,2), extractcomp(XX,3), S)

plot(tt, XA1.^2 .+XA2.^2 .+XA3.^2)


d=2
q = u‚ÇÄ[1:d]
ŒΩ = reshape(u‚ÇÄ[d+1:end],d,d)
_Œì = ManifoldDiffusions.Œì(q,1,S)
dw = ww[2]-ww[1]
@einsum q·¥±[i] := q[i] + ŒΩ[i,j]*dw[j]
@einsum ŒΩ·¥±[i,j] := ŒΩ[i,j] - _Œì[i,k,l]*ŒΩ[k,m]*ŒΩ[l,j]*dw[m]
_Œì·¥± = ManifoldDiffusions.Œì(q·¥±, 1, S)
@einsum qNew[i] := q[i] + 0.5*(ŒΩ·¥±[i,j]+ŒΩ[i,j])*dw[j]
@einsum ŒΩNew[i,j] := ŒΩ[i,j] - 0.5*(_Œì·¥±[i,k,l]*ŒΩ·¥±[k,m]*ŒΩ·¥±[l,j]+ _Œì[i,k,l]*ŒΩ[k,m]*ŒΩ[l,j])*dw[m]

ŒΩ‚ÇÅ = ManifoldDiffusions.Dœï(x‚ÇÄ, 1, S)*[1.,0.,0.]
ŒΩ‚ÇÇ = ManifoldDiffusions.Dœï(x‚ÇÄ, 1, S)*[0.,0.,1.]

ManifoldDiffusions.Dœï‚Åª¬π(q‚ÇÄ, 1, S)*[0.,-1.]
"""
    The object SphereDiffusion(œÉ, ùïä) can be used to generate a diffusion
    on the sphere ùïä. We will focus on the diffusion equation
        `` dX_t = Œ£^¬Ω P(X_t)‚àòdW_t ``
    where œÉ ‚àà ‚Ñù
"""

struct SphereDiffusion{T} <: ContinuousTimeProcess{‚Ñù{3}}
    Œ£::T
    ùïä::Sphere

    function SphereDiffusion(œÉ::T, ùïä::Sphere) where {T<:Real}
        if œÉ == 0
            error("œÉ cannot be 0")
        end
        new{T}(œÉ, ùïä)
    end
end

Bridge.b(t, x, ‚Ñô::SphereDiffusion{T}) where {T} = zeros(3)
Bridge.œÉ(t, x, ‚Ñô::SphereDiffusion{T}) where {T} = ‚Ñô.Œ£*P(x, ùïä)
Bridge.constdiff(::SphereDiffusion{T}) where {T} = false

"""
    Example: Constructing a Brownian motion on a sphere of radius 1
"""

ùïä = Sphere(1.0)
‚Ñô = SphereDiffusion(1.0, ùïä)

x‚ÇÄ = [0.,0.,1.]
W = sample(0:dt:T, Wiener{‚Ñù{3}}())
X = solve(StratonovichEuler(), x‚ÇÄ, W, ‚Ñô)

plotly()
SpherePlot(X, ùïä)

"""
    Insert the settings for the auxiliary process tildeX
        and set partial bridges for each data point
"""
struct SphereDiffusionAux <: ContinuousTimeProcess{‚Ñù{3}}
    Œæ
    œÉ
    B
end

Bridge.B(t, ‚Ñôt::SphereDiffusionAux) = ‚Ñôt.B
Bridge.Œ≤(t, ‚Ñôt::SphereDiffusionAux) = zeros(3)
Bridge.œÉ(t, ‚Ñôt::SphereDiffusionAux) = ‚Ñôt.œÉ
Bridge.b(t, x, ‚Ñôt::SphereDiffusionAux) = Bridge.B(t, ‚Ñôt)*x + Bridge.Œ≤(t,‚Ñôt)
Bridge.a(t, ‚Ñôt::SphereDiffusionAux) = Bridge.œÉ(t, ‚Ñôt)*Bridge.œÉ(t, ‚Ñôt)'
Bridge.constdiff(::SphereDiffusionAux) = true

"""
    Now let us create a proposal diffusion bridge that hits Œæ at time T
    we use the transition density of tildeX in the guided proposal

"""
Œæ = [0.,1.,0.]
f(Œæ, ùïä) # This should be zero

‚Ñôt = SphereDiffusionAux(Œæ, P(Œæ, ùïã), [rand() rand() rand() ; rand() rand() rand() ; rand() rand() rand()])

"""
    Settings for the Guided proposal
"""
Œ¶(t, ‚Ñôt::SphereDiffusionAux) = exp(‚Ñôt.B*t)
Œ¶(t, s, ‚Ñôt::SphereDiffusionAux) = exp(‚Ñôt.B*(t-s)) # = Œ¶(t)Œ¶(s)‚Åª¬π
Œ• = Œ£

Lt(t, ‚Ñôt::SphereDiffusionAux) = L*Œ¶(T, t, ‚Ñôt)
Œºt(t, ‚Ñôt::SphereDiffusionAux) = zeros(3)


M‚Å∫ = zeros(typeof(Œ£), length(tt))
M = copy(M‚Å∫)
M‚Å∫[end] = Œ•
M[end] = inv(Œ•)
for i in length(tt)-1:-1:1
    dt = tt[i+1] - tt[i]
    M‚Å∫[i] = M‚Å∫[i+1] + Lt(tt[i+1], ‚Ñôt)*Bridge.a(tt[i+1], ‚Ñôt)*Lt(tt[i+1], ‚Ñôt)'*dt + Œ•
    M[i] = inv(M‚Å∫[i])
end

H((i, t)::IndexedTime, x, ‚Ñôt::SphereDiffusionAux) = Lt(t, ‚Ñôt)'*M[i]*Lt(t, ‚Ñôt)
r((i, t)::IndexedTime, x, ‚Ñôt::SphereDiffusionAux) = Lt(t, ‚Ñôt)'*M[i]*(‚Ñôt.Œæ .- Œºt(t, ‚Ñôt) .- Lt(t, ‚Ñôt)*x)

struct GuidedProposalSphere <: ContinuousTimeProcess{‚Ñù{3}}
    Œæ
    Target::SphereDiffusion
    Auxiliary::SphereDiffusionAux
end

function Bridge.b(t, x, ‚Ñô·µí::GuidedProposalSphere)
    k = findmin(abs.(tt.-t))[2]
    ‚Ñô = ‚Ñô·µí.Target
    ‚Ñôt = ‚Ñô·µí.Auxiliary
    a = Bridge.œÉ(t, x, ‚Ñô)*Bridge.œÉ(t, x, ‚Ñô)'
    return Bridge.b(t, x, ‚Ñô) + a*r((k, tt[k]), x, ‚Ñôt)
end

Bridge.œÉ(t, x, ‚Ñô·µí::GuidedProposalSphere) = Bridge.œÉ(t, x, ‚Ñô·µí.Target)
Bridge.constdiff(::GuidedProposalSphere) = false

‚Ñô·µí = GuidedProposalSphere(Œæ, ‚Ñô, ‚Ñôt)
W = sample(0:dt:T, Wiener{‚Ñù{3}}())
X·µí = solve(StratonovichEuler(), [0.,0.,1.], W, ‚Ñô·µí)

plotly()
plot([extractcomp(X·µí.yy, 1), extractcomp(X·µí.yy, 2), extractcomp(X·µí.yy, 3)])
SpherePlot(X·µí, ùïä)
plot!([0.], [0.], [1.],
        legend = true,
        color = :red,
        seriestype = :scatter,
        markersize = 1.5,
        label = "start")
plot!([Œæ[1]],  [Œæ[2]],  [Œæ[3]],
        color = :yellow,
        seriestype = :scatter,
        markersize = 1.5,
        label = "end")
