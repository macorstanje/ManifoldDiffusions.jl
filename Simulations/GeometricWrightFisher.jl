using LinearAlgebra
include("../src/ManifoldDiffusions.jl")
using Main.ManifoldDiffusions
using StaticArrays
using Einsum
using ForwardDiff
using Bridge
using Plots

extractcomp(v, i) = map(x->x[i], v)
const ‚Ñù{N} = SVector{N, Float64}

struct Simplex{T<:Int64} <: Manifold
    n::T
    function Simplex(n::T) where {T<:Int64}
        if n<=0
            error("Dimension must be a positive integer")
        end
        new{T}(n)
    end
end

inSimplex(x) = all([x[i]>0 && x[i]<1 for i in eachindex(x)]) && sum(x) == 1
inH(x) = (sum(x)==0)

ùíû(p) = p./sum([p[i] for i in eachindex(p)])

pertubate(p, q) = ùíû(p.*q)
power(Œ±, p) = ùíû(p.^Œ±)

# Aitchison inner product
function innerA(p,q)
    n = length(p)
    return sum([log(p[i]/p[j])*log(q[i]/q[j])/(2*n) for i in eachindex(p) for j in eachindex(p)])
end
innerH(p,q) = dot(p,q)

# Center log-ration transform Œî ‚Üí H
function clr(p)
    g = prod(p)^(1/length(p))
    return log.(p./g)
end

# Aitchison distance
function dA¬≤(p,q)
    n = length(p)
    return sum([(log(p[i]/p[j]) - log(q[i]/q[j]))^2 for i in eachindex(p) for j in eachindex(p)])/(2*n)
end
#
sfm(x) = ùíû(exp.(x))

"""
    Riemannian geometry
"""

# g(x,u,v) = sum([sum(x)*u[i]*v[i]/x[i] for i in eachindex(u)])
# Riemannian metric
function g(x::T, Œî::Simplex) where {T<:Union{AbstractArray, Real}}
    if Œî.n == 1
        return 1.0
    else
     return diagm([sum(x)/x[i] for i in eachindex(x)])
end
end

function gÀ£(p::T, Œî::Simplex) where {T<:Union{AbstractArray, Real}}
    diagm(p) - p*transpose(p)
end

function Main.ManifoldDiffusions.Œì(x::T, Œî::Simplex) where {T<:Union{AbstractArray, Real}}
    if Œî.n == 1
        ‚àÇg = ForwardDiff.derivative(y -> g(y,Œî), x)
        g‚Åª¬π = 1/g(x, Œî)
        return .5*g‚Åª¬π*‚àÇg
    end
    if Œî.n > 0
        ‚àÇg = reshape(ForwardDiff.jacobian(y -> g(y,Œî), x), Œî.n, Œî.n, Œî.n)
        g‚Åª¬π = gÀ£(x, Œî)
        @einsum out[i,j,k] := .5*g‚Åª¬π[i,l]*(‚àÇg[k,l,i] + ‚àÇg[l,j,k] - ‚àÇg[j,k,l])
        return out
    end
end

# function Hamiltonian(x, p, Œî::Simplex)
#     .5*p'*gÀ£(x, Œî)*p
# end
#
# function Integrate(H, tt, x‚ÇÄ, p‚ÇÄ, Œî::Simplex)
#     N = length(tt)
#     x, p = x‚ÇÄ, p‚ÇÄ
#     xx, pp = [x], [p]
#     for i in 1:(N-1)
#         dt = tt[i+1]-tt[i]
#         dp = ForwardDiff.gradient(x -> -H(x, p, Œî), x).*dt
#         p += .5*dp
#         dx = ForwardDiff.gradient(p -> H(x, p, Œî), p).*dt
#         x += dx
#         dp = ForwardDiff.gradient(x -> -H(x, p, Œî), x).*dt
#         p += .5*dp
#         push!(xx, x)
#         push!(pp, p)
#     end
#     return xx,pp
# end
#
# function Geodesic(x‚ÇÄ, v‚ÇÄ, tt, Œî::Simplex)
#     xx, vv = Integrate(Hamiltonian, tt, x‚ÇÄ, v‚ÇÄ, Œî)
#     return xx, vv
# end
#
# function ExponentialMap(x‚ÇÄ, v‚ÇÄ , tt, Œî::Simplex)
#     tt = collect(0,0.01,1.0)
#     xx, vv = Geodesic(x‚ÇÄ,v‚ÇÄ,tt,Œî)
#     return xx[end]
# end
#
# function ParallelTransport(Œ≥, Œ≥Ãá, V‚ÇÄ, tt, Œî::Simplex)
#     N = length(tt)
#     V = V‚ÇÄ
#     VV = [V‚ÇÄ]
#     for n in 1:(N-1)
#         dt = tt[n+1] - tt[n]
#         _Œì = Œì(Œ≥[n], Œî)
#         _Œ≥Ãá = Œ≥Ãá[n]
#         if length(V‚ÇÄ)>1
#             @einsum dV[i] := - _Œì[i,j,k]*V[j]*_Œ≥Ãá[k]*dt
#         else
#             dV = -_Œì*V*_Œ≥Ãá*dt
#         end
#         V += dV
#         push!(VV, V)
#     end
#     return VV
# end
#
# function Hor(i::Int64, u::Frame, Œî::Simplex)
#     x, ŒΩ = u.x, u.ŒΩ
#     _Œì = Œì(x, Œî)
#     if length(x)>1
#      @einsum dŒΩ[i,k,m] := -ŒΩ[j,i]*ŒΩ[l,m]*_Œì[k,j,l]
#      return TangentFrame(u, ŒΩ[:,i], dŒΩ[i,:,:])
#     else
#      return TangentFrame(u, ŒΩ, -ŒΩ^2*_Œì)
#     end
# end


Œî = Simplex(1)
tt = collect(0:0.01:10)
W = sample(tt, Wiener())

x‚ÇÄ = 1/2
u‚ÇÄ = Frame(x‚ÇÄ, 1/4 , Œî)
X = StochasticDevelopment(W, u‚ÇÄ , Œî; drift=false)

plotly()
K=10
XX = [X]
plt1 = plot(X.tt, map(x -> clr(Œ†(x)), X.yy), legend = false)
for i in 2:K
    sample!(W, Wiener())
    push!(XX, StochasticDevelopment(W, u‚ÇÄ , Œî; drift=false))
    plot!(plt1, tt, map(x -> clr(Œ†(x)), XX[i].yy), legend=false)
end
display(plt1)



v =
V·µí(t,y, Œî::Simplex) =
