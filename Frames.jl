
"""
    Elements of F(‚Ñ≥) consist of a position x and a GL(d, ‚Ñù)-matrix ŒΩ that
    represents a basis for ùëá‚Çì‚Ñ≥
"""

struct Frame{Tx, TŒΩ}
    x::Tx
    ŒΩ::TŒΩ
    function Frame(x::Tx, ŒΩ::TŒΩ) where {Tx, TŒΩ <: AbstractArray}
        # if rank(ŒΩ) != length(x)
        #     error("A is not of full rank")
        # end
        new{Tx, TŒΩ}(x, ŒΩ)
    end
end

# A tangent vector (xÃá, ŒΩÃá) ‚àà ùëá·µ§F(‚Ñ≥)
struct TangentFrame{Tx,TŒΩ}
    u::Frame
    xÃá::Tx
    ŒΩÃá::TŒΩ
    function TangentFrame(u, xÃá::Tx, ŒΩÃá::TŒΩ) where {Tx, TŒΩ <: AbstractArray}
        new{Tx,TŒΩ}(u, xÃá, ŒΩÃá)
    end
end

"""
    Some generic functions for calculations on F(‚Ñ≥)
"""

# Theoretically, these do not exist, used for numerical calculations
Base.:+(u::Frame{Tx, TŒΩ}, v::Frame{Tx, TŒΩ}) where {Tx, TŒΩ} = Frame(u.x + v.x , u.ŒΩ .+ v.ŒΩ)
Base.:-(u::Frame{Tx, TŒΩ}, v::Frame{Tx, TŒΩ}) where {Tx, TŒΩ} = Frame(u.x - v.x , u.ŒΩ .- v.ŒΩ)
Base.:-(u::Frame{Tx, TŒΩ}) where {Tx, TŒΩ} = Frame(-u.x , -u.ŒΩ)

Base.:+(u::Frame{Tx, TŒΩ}, y::Tx) where {Tx, TŒΩ} = Frame(u.x + y, u.ŒΩ)
Base.zero(u::Frame{Tx, TŒΩ}) where {Tx, TŒΩ} = Frame(zero(u.x), one(u.ŒΩ))

Base.:*(u::Frame{Tx, TŒΩ}, y::Tx) where {Tx,TŒΩ} = Frame(y.*u.x, y.*u.ŒΩ)

function Base.:+(X::TangentFrame{Tx, TŒΩ}, Y::TangentFrame{Tx,TŒΩ}) where {Tx,TŒΩ}
    if X.u != Y.u
        error("Vectors are in different tangent spaces")
    end
    return TangentFrame(X.u, X.xÃá + Y.xÃá, X.ŒΩÃá + Y.ŒΩÃá)
end

function Base.:-(X::TangentFrame{Tx, TŒΩ}, Y::TangentFrame{Tx,TŒΩ}) where {Tx,TŒΩ}
    if X.u != Y.u
        error("Vectors are in different tangent spaces")
    end
    return TangentFrame(X.u, X.xÃá - Y.xÃá, X.ŒΩÃá - Y.ŒΩÃá)
end

# this function should be the exponential map on F(‚Ñ≥)
function Base.:+(u::Frame{Tx, TŒΩ}, X::TangentFrame{Tx, TŒΩ}) where {Tx,TŒΩ}
    if X.u != u
        error("X is not tangent to u")
    end
    return Frame(u.x + X.xÃá , u.ŒΩ + X.ŒΩÃá)
end

# Canonical projection
Œ†(u::Frame{Tx, TŒΩ}) where {Tx,TŒΩ} = u.x

# Pushforward map of the canonocal projection
Œ†À£(X::TangentFrame{Tx, TŒΩ}) where {Tx, TŒΩ} = X.xÃá

# The group action of a frame on ‚Ñù·µà
FrameAction(u::Frame{Tx, TŒΩ}, e::T) where {Tx,TŒΩ,T<:AbstractArray} = u.ŒΩ*e

# Horizontal lift of the orthogonal projection
PÀ£(u::Frame, ‚Ñ≥::T) where {T<:EmbeddedManifold} = TangentFrame(u, u.x, P(u.x, ‚Ñ≥))

"""
    Horizontal vector fields
"""

# Horizontal vector (a tangent frame) corresponding to the i'th unit vector
function Hor(i::Int64, u::Frame, ‚Ñ≥::TM) where {TM<:EmbeddedManifold}
    x, ŒΩ = u.x, u.ŒΩ
    _Œì = Œì(u.x, ‚Ñ≥)
    @einsum dŒΩ[i,k,m] := -ŒΩ[i,j]*ŒΩ[l,m]*_Œì[k,j,l]
    return TangentFrame(u, ŒΩ[i], dŒΩ[i,:,:])
end

# Horizontal vector field
# Hor(i::Int64, u::Frame, ‚Ñ≥::T) where {T<:EmbeddedManifold} = TangentFrame(u, u.x, PÀ£(u, ‚Ñ≥)[:,i])



"""
    Now let us create a stochastic process on the frame bundle of the 2-sphere ùïä¬≤
"""

# Functions for solving SDEs on the frame bundle
using Bridge
include("FrameBundles.jl")

struct SphereDiffusion <: FrameBundleProcess
    ùïä::Sphere

    function SphereDiffusion(ùïä::Sphere)
        new(ùïä)
    end
end

Bridge.H(u, ‚Ñô::SphereDiffusion) = PÀ£(u, ‚Ñô.ùïä)
Bridge.constdiff(::SphereDiffusion) = false

ùïä = Sphere(1.0)
‚Ñô = SphereDiffusion(ùïä)

x‚ÇÄ = [0.,0.,1.]
u‚ÇÄ = Frame(x‚ÇÄ, [2. 0. 0. ; 0. 1. 0. ; 0. 0. .5])

T = 1.0
dt = 1/1000
œÑ(T) = (x) -> x*(2-x/T)
tt = œÑ(T).(0.:dt:T)
W = sample(0:dt:T, Wiener{‚Ñù{3}}())
U = solve(StratonovichEuler(), u‚ÇÄ, W, ‚Ñô)
X  = SamplePath(tt, Œ†.(U.yy))

include("Sphereplots.jl")
plotly()
SpherePlot(X, ùïä)

function SimulatePoints(n, u‚ÇÄ, ‚Ñô::SphereDiffusion)
    out = Frame[]
    it = 0
    while length(out) < n
        W = sample(0.:dt:T, Wiener{‚Ñù{3}}())
        U = solve(StratonovichEuler(),u‚ÇÄ, W, ‚Ñô)
        push!(out, U.yy[end])
    end
    return out
end

@time Œæ = SimulatePoints(1000, u‚ÇÄ, ‚Ñô)

SphereScatterPlot(extractcomp(Œ†.(Œæ),1), extractcomp(Œ†.(Œæ),2), extractcomp(Œ†.(Œæ),3), x‚ÇÄ, ùïä )
