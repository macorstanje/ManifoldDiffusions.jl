var documenterSearchIndex = {"docs":
[{"location":"library/basics/#Various-manifolds-and-basic-functions-1","page":"Basics","title":"Various manifolds and basic functions","text":"","category":"section"},{"location":"library/basics/#","page":"Basics","title":"Basics","text":"CurrentModule = ManifoldDiffusions","category":"page"},{"location":"library/basics/#","page":"Basics","title":"Basics","text":"Manifold\nEmbeddedManifold\nTangentVector\nEllipse\nSphere\nTorus\nParaboloid\ng\nŒì","category":"page"},{"location":"library/basics/#ManifoldDiffusions.Manifold","page":"Basics","title":"ManifoldDiffusions.Manifold","text":"Manifold\n\nAbstract (super-)type under which all speficic manifolds fall\n\n\n\n\n\n","category":"type"},{"location":"library/basics/#ManifoldDiffusions.EmbeddedManifold","page":"Basics","title":"ManifoldDiffusions.EmbeddedManifold","text":"EmbeddedManifold <: Manifold\n\nEmbeddedManifold creates a manifold ‚Ñ≥ = f^{-1}({0}) of dimension d=N-n where f should be a smooth function ‚Ñù^N  ‚Ñù^n. An EmbeddedManifold ‚Ñ≥ equipped with functions f( , ‚Ñ≥), P( , ‚Ñ≥) and F( , ‚Ñ≥). Here f is such that f(q, ‚Ñ≥)=0 when q‚Ñ≥, P(q, ‚Ñ≥) is the projection matrix ‚Ñù^NT_q‚Ñ≥ given by I-n(q)n(q)^T, where n(q)=f(q)f(q). F(q, ‚Ñ≥) is the transformation from local coordinates q to global coordinates in ‚Ñù^N.\n\n\n\n\n\n","category":"type"},{"location":"library/basics/#ManifoldDiffusions.TangentVector","page":"Basics","title":"ManifoldDiffusions.TangentVector","text":"TangentVector{T, TM}\n\nElements of ùëá‚Çì‚Ñ≥ and some vector-space operations.\n\n\n\n\n\n","category":"type"},{"location":"library/basics/#ManifoldDiffusions.Ellipse","page":"Basics","title":"ManifoldDiffusions.Ellipse","text":"Ellipse{T<:Real} <: EmbeddedManifold\n\nSettings for an ellipse as subset of ‚Ñù¬≤. Elements satisfy (xa)^2 + (yb)^2 = 1. For an object ùîº = Ellipse(a, b), we have\n\nf(q mathcalùîº) = left(fracq_1aright)^2 + left(fracq_2bright)^2 - 1\nF(q ùîº) = beginpmatrix acos q  b sin qendpmatrix\n\nExample: Generate a unit circle\n\njulia> ùîº = Ellipse(1.0, 1.0)\n\n\n\n\n\n","category":"type"},{"location":"library/basics/#ManifoldDiffusions.Sphere","page":"Basics","title":"ManifoldDiffusions.Sphere","text":"Sphere{T<:Real} <: EmbeddedManifold\n\nSettings for the sphere ùïä¬≤. Call Sphere(R) to generate a sphere with radius R<:Real. Elements satisfy x^2+y^2+z^2=R^2. The local coordinates are modelled via a stereograpgical projection.\n\nFor a Sphere ùïä = Sphere(R), we have\n\nf(q ùïä) = q_1^2+q_2^2-R^2\nF(q ùïä) = beginpmatrix frac2q_1q_1^2+q_2^2+1  frac2q_2q_1^2+q_2^2+1  fracq_1^2+q_2^2-1q_1^2+q_2^2+1 endpmatrix\n\nExample: Generate a unit sphere\n\njulia> ùïä = Sphere(1.0)\n\n\n\n\n\n","category":"type"},{"location":"library/basics/#ManifoldDiffusions.Torus","page":"Basics","title":"ManifoldDiffusions.Torus","text":"Torus{T<:Real} <: EmbeddedManifold\n\nSettings for the torus ùïã¬≤ with inner radius r and outer radius R. Call Torus(R,r) to generate a torus with inner radius r<:Real and outer radius R<:Real. Elements satisfy (x^2+y^2+z^2+R^2-r^2)^2=4R^2(x^2+y^2).\n\nFor a Torus ùïã = Torus(R, r), we have\n\nf(q ùïã) = (q_1^2+q_2^2+q_3^2+R^2-r^2)^2-4R^2(q_1^2+q_2^2)\nF(q ùïã) = beginpmatrix (R+rcos q_1)cos q_2  (R+rcos q_1)sin q_2  rsin q_1 endpmatrix\n\nExample: Generate a torus with R=3 and r=1\n\njulia> ùïã = Torus(3.0, 1.0)\n\n\n\n\n\n","category":"type"},{"location":"library/basics/#ManifoldDiffusions.Paraboloid","page":"Basics","title":"ManifoldDiffusions.Paraboloid","text":"Paraboloid{T<:Real} <: EmbeddedManifold\n\nSettings for the Paraboloid. Call Paraboloid(a,b) to generate a paraboloid with parameters a<:Real and outer radius b<:Real. Elements satisfy (xa)^2+(yb)^2 = z.\n\nFor a paraboloid ‚Ñô = Paraboloid(a, b), we have\n\nf(q ‚Ñô) = left(fracq_1aright)^2 + left(fracq_2bright)^2-q_3\nF(q ‚Ñô) = beginpmatrix q_1  q_2  left(fracq_1aright)^2 + left(fracq_2bright)^2 endpmatrix\n\nExample: Generate a torus with a=0 and b=1\n\njulia> ‚Ñô = Parabolod(3.0, 1.0)\n\n\n\n\n\n","category":"type"},{"location":"library/basics/#ManifoldDiffusions.g","page":"Basics","title":"ManifoldDiffusions.g","text":"g(q::T, ‚Ñ≥::TM) where {T<:Union{AbstractArray, Real}, TM<:EmbeddedManifold}\n\nIf ‚Ñ≥<:EmbeddedManifold is given in local coordinates F‚Ñù^d  ‚Ñù^N, we obtain a Riemannian metric. g(q, ‚Ñ≥) returns the matrix mathrmdF^TmathrmdF, where mathrmdF denotes the Jacobian matrix for F in q<:Union{AbstractArray, Real}.\n\n\n\n\n\ng(X::TangentFrame, Y::TangentFrame)\n\nAdds a Riemannian structure to the Frame bundle by introducing a cometric\n\n\n\n\n\n","category":"function"},{"location":"library/basics/#ManifoldDiffusions.Œì","page":"Basics","title":"ManifoldDiffusions.Œì","text":"Œì(q::T, ‚Ñ≥::TM) where {T<:Union{AbstractArray, Real}, TM<:EmbeddedManifold}\n\nIf ‚Ñ≥<:EmbeddedManifold is given in local coordinates F‚Ñù^d  ‚Ñù^N, we obtain Christoffel symbols Œì^i_jk for the Levi-Civita connection\n\nIn local coordinates q, Œì(q, ‚Ñ≥) returns a matrix of size ddd where the element [i,j,k] corresponds to Œì^i_jk.\n\n\n\n\n\n","category":"function"},{"location":"manual/#Manual-1","page":"Manual","title":"Manual","text":"","category":"section"},{"location":"manual/#","page":"Manual","title":"Manual","text":"To do ...","category":"page"},{"location":"library/frames/#Frames-and-the-Frame-bundle-1","page":"Frames and the frame bundle","title":"Frames and the Frame bundle","text":"","category":"section"},{"location":"library/frames/#","page":"Frames and the frame bundle","title":"Frames and the frame bundle","text":"CurrentModule = ManifoldDiffusions","category":"page"},{"location":"library/frames/#","page":"Frames and the frame bundle","title":"Frames and the frame bundle","text":"Frame\nTangentFrame\nŒ†\nŒ†À£\nHor","category":"page"},{"location":"library/frames/#ManifoldDiffusions.Frame","page":"Frames and the frame bundle","title":"ManifoldDiffusions.Frame","text":"Frame{Tx, TŒΩ, TM}\n\nElements of mathrmF(‚Ñ≥) consist of a position x::Tx on ‚Ñ≥<:EmbeddedManifold and a mathrmGL(d ‚Ñù)-matrix ŒΩ::TŒΩ that consists of column vectors that form a basis for T_x‚Ñ≥. All input is assumed to be in local coordinates that coincide with F( ,‚Ñ≥).\n\nExample: A frame on the south pole on the sphere\n\njulia> ùïä = Sphere(1.0)\njulia> u = Frame([0. , 0.], [1. 0. ; 0.  1.], ùïä)\njulia> u.x # returns [0. , 0.]\njulia> u.ŒΩ # returns [1. 0. ; 0. 1.]\n\n\n\n\n\n","category":"type"},{"location":"library/frames/#ManifoldDiffusions.TangentFrame","page":"Frames and the frame bundle","title":"ManifoldDiffusions.TangentFrame","text":"TangentFrame{Tx, TŒΩ}\n\nA tangent vector (x ŒΩ)  T_umathrmF(‚Ñ≥). This object consists of the frame u::Frame that it is tangent to and the velocities xÃá and ŒΩÃá.\n\nExample:\n\njulia> ùïä = Sphere(1.0)\njulia> u = Frame([0. , 0.], [1. 0. ; 0.  1.], ùïä)\njulia> V = TangentFrame(u, [1. 0.] , [-0.1 0. ; -0.5 1.])\n\n\n\n\n\n","category":"type"},{"location":"library/frames/#ManifoldDiffusions.Œ†","page":"Frames and the frame bundle","title":"ManifoldDiffusions.Œ†","text":"Œ†(u::Frame)\n\nCanonical projection Œ† mathrmF(‚Ñ≥)  ‚Ñ≥ that maps (xŒΩ) to x.\n\n\n\n\n\n","category":"function"},{"location":"library/frames/#ManifoldDiffusions.Œ†À£","page":"Frames and the frame bundle","title":"ManifoldDiffusions.Œ†À£","text":"Œ†À£(X::TangentFrame)\n\nPushforward map of the canonocal projection Œ†^* TmathrmF(‚Ñ≥)  T‚Ñ≥ that maps (x ŒΩ) to x\n\n\n\n\n\n","category":"function"},{"location":"library/frames/#ManifoldDiffusions.Hor","page":"Frames and the frame bundle","title":"ManifoldDiffusions.Hor","text":"Hor(i::Int64, u::Frame, ‚Ñ≥::TM) where {TM<:EmbeddedManifold}\n\nReturns the horizontal vector H_i(u) in T_umathrmF(‚Ñ≥) as an element of type TangentFrame.\n\n\n\n\n\n","category":"function"},{"location":"library/frames/#","page":"Frames and the frame bundle","title":"Frames and the frame bundle","text":"FrameBundle\nHamiltonian\nStochasticDevelopment!","category":"page"},{"location":"library/frames/#ManifoldDiffusions.FrameBundle","page":"Frames and the frame bundle","title":"ManifoldDiffusions.FrameBundle","text":"FrameBundle\n\nThe object FrameBundle(‚Ñ≥) represents the frame bundle over a manifold mathcalM.\n\n\n\n\n\n","category":"type"},{"location":"library/frames/#ManifoldDiffusions.Hamiltonian","page":"Frames and the frame bundle","title":"ManifoldDiffusions.Hamiltonian","text":"Hamiltonian(x::Tx, p::Tp, ‚Ñ≥::TM) where {Tx, Tp <: Union{AbstractArray, Real}, TM <: EmbeddedManifold}\n\nReturns the Hamiltonian induced by the Riemannian metric for a tangent vector p to ‚Ñ≥ at x\n\n\n\n\n\nHamiltonian(u::Frame, p::TangentFrame, F‚Ñ≥::FrameBundle{TM})\n\nReturns the Hamiltonian that results from the cometric g.\n\n\n\n\n\nHamiltonian(x::Tx, p::Tp, F‚Ñ≥::FrameBundle{TM})\n\nDifferent representation of the Hamiltonian as functions of two vectors of size d+d^2\n\n\n\n\n\n","category":"function"},{"location":"library/frames/#ManifoldDiffusions.StochasticDevelopment!","page":"Frames and the frame bundle","title":"ManifoldDiffusions.StochasticDevelopment!","text":"StochasticDevelopment!(Y, W, u‚ÇÄ, ‚Ñ≥; drift)\n\nSimulate the process U_t_t on mathrmF(mathcalM) starting at u‚ÇÄ that solves the SDE mathrmdU_t = V^*(U_t)mathrmdt+H(U_t) circ mathrmdW_t This function writes the process in F‚Ñ≥ in place of Y\n\n\n\n\n\n","category":"function"},{"location":"library/library/#Library-1","page":"Library","title":"Library","text":"","category":"section"},{"location":"library/library/#","page":"Library","title":"Library","text":"pending","category":"page"},{"location":"#Documentation-for-Manifolds.jl-1","page":"Home","title":"Documentation for Manifolds.jl","text":"","category":"section"},{"location":"#Summary-1","page":"Home","title":"Summary","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"This repository contains various functionalities for doing analysis on manifold-valued diffusion processes.","category":"page"},{"location":"#Features-1","page":"Home","title":"Features","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"Functionalities for the following submanifolds of mathbbR^3 are implemented","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Sphere\nTorus\nParaboloid","category":"page"},{"location":"#","page":"Home","title":"Home","text":"The functionalities in this repositiory can be used to construct Brownian motion, possibly with drift, on the frame bundle of these manifolds through the Eels-Elworthy-Malliavin construction. ","category":"page"},{"location":"library/geodesics/#Geodesics-1","page":"Geodesics","title":"Geodesics","text":"","category":"section"},{"location":"library/geodesics/#","page":"Geodesics","title":"Geodesics","text":"CurrentModule = ManifoldDiffusions","category":"page"},{"location":"library/geodesics/#","page":"Geodesics","title":"Geodesics","text":"Geodesic\nExponentialMap\nParallelTransport","category":"page"},{"location":"library/geodesics/#ManifoldDiffusions.Geodesic","page":"Geodesics","title":"ManifoldDiffusions.Geodesic","text":"Geodesic(x‚ÇÄ::Tx, v‚ÇÄ::Tv, tt, ‚Ñ≥::TM) where {Tx, Tv <: AbstractArray, TM<:EmbeddedManifold}\n\nReturns the values of the geodesic on ‚Ñ≥ starting at x‚ÇÄ with initial velicity v‚ÇÄ on a discretized time interval tt. All input is in local coordinates.\n\n\n\n\n\nGeodesic(u‚ÇÄ::Frame, v‚ÇÄ::TangentFrame, tt, F‚Ñ≥::FrameBundle{TM})\n\nReturns a geodesic on F‚Ñ≥ starting at u‚ÇÄ with initial velocity v‚ÇÄ and evaluated at a discretized time interval tt.\n\n\n\n\n\n","category":"function"},{"location":"library/geodesics/#ManifoldDiffusions.ExponentialMap","page":"Geodesics","title":"ManifoldDiffusions.ExponentialMap","text":"ExponentialMap(x‚ÇÄ::Tx, v‚ÇÄ::Tv, ‚Ñ≥::TM) where {Tx, Tv <: AbstractArray, TM<:EmbeddedManifold}\n\nReturns as new element of ‚Ñ≥ that results from Exp_x_0v_0, where the point x‚ÇÄ on ‚Ñ≥ and initial velocity v‚ÇÄ are given in local coordinates.\n\n\n\n\n\nExponentialMap(u‚ÇÄ::Frame, v‚ÇÄ::TangentFrame, F‚Ñ≥::FrameBundle{TM})\n\nThe exponential map on F‚Ñ≥ starting from u‚ÇÄ with initial velocity v‚ÇÄ.\n\n\n\n\n\n","category":"function"},{"location":"library/geodesics/#ManifoldDiffusions.ParallelTransport","page":"Geodesics","title":"ManifoldDiffusions.ParallelTransport","text":"ParallelTransport(Œ≥, Œ≥Ãá, V‚ÇÄ, tt, ‚Ñ≥)\n\nreturns the parallel transport of an initial  vector V‚ÇÄ, tangent to ‚Ñ≥ at Œ≥(0), along a curve Œ≥. It is assumed Œ≥ and Œ≥Ãá are known on a discretized time interval tt\n\n\n\n\n\n","category":"function"},{"location":"library/manifoldplots/#Plotting-on-Manifolds-1","page":"Plots on Manifolds","title":"Plotting on Manifolds","text":"","category":"section"},{"location":"library/manifoldplots/#","page":"Plots on Manifolds","title":"Plots on Manifolds","text":"CurrentModule = ManifoldDiffusions","category":"page"},{"location":"library/manifoldplots/#","page":"Plots on Manifolds","title":"Plots on Manifolds","text":"Al plotting functions in this library make use of the graphical library plotly() from the package Plots.","category":"page"},{"location":"library/manifoldplots/#","page":"Plots on Manifolds","title":"Plots on Manifolds","text":"SpherePlot\nSphereScatterPlot\nSphereFullPlot","category":"page"},{"location":"library/manifoldplots/#ManifoldDiffusions.SpherePlot","page":"Plots on Manifolds","title":"ManifoldDiffusions.SpherePlot","text":"SpherePlot(X::T , Y::T, Z::T, ùïä::Sphere) where {T<:AbstractArray}\n\nPlot a function that takes values X, Y, Z on the Sphere ùïä.\n\n\n\n\n\nSpherePlot(X::SamplePath{T}, ùïä::Sphere) where {T}\n\nPlot a stochastic process of type SamplePath on ùïä.\n\n\n\n\n\n","category":"function"},{"location":"library/manifoldplots/#ManifoldDiffusions.SphereScatterPlot","page":"Plots on Manifolds","title":"ManifoldDiffusions.SphereScatterPlot","text":"SphereScatterPlot(X::T, Y::T, Z::T, ùïä::Sphere) where {T<:AbstractArray}\n\nMake a scatterplot of coordinates X, Y, Z on ùïä.\n\n\n\n\n\n","category":"function"},{"location":"library/manifoldplots/#ManifoldDiffusions.SphereFullPlot","page":"Plots on Manifolds","title":"ManifoldDiffusions.SphereFullPlot","text":"SphereFullPlot(trace, data, target, ùïä::Sphere; PlotUpdates = true)\n\nA plot of a trace of (for example MCMC-) updates with data and a target added. This function returns a plot on ùïä with a line trace, points data and a point target.\n\n\n\n\n\n","category":"function"},{"location":"library/manifoldplots/#","page":"Plots on Manifolds","title":"Plots on Manifolds","text":"TorusPlot\nTorusScatterPlot\nTorusFullPlot","category":"page"},{"location":"library/manifoldplots/#ManifoldDiffusions.TorusPlot","page":"Plots on Manifolds","title":"ManifoldDiffusions.TorusPlot","text":"TorusPlot(X::T , Y::T, Z::T, ùïã::Torus) where {T<:AbstractArray}\n\nPlot a function that takes values X, Y, Z on the Torus ùïã.\n\n\n\n\n\nTorusPlot(X::SamplePath{T}, ùïã::Torus) where {T}\n\nPlot a stochastic process of type SamplePath on ùïã.\n\n\n\n\n\n","category":"function"},{"location":"library/manifoldplots/#ManifoldDiffusions.TorusScatterPlot","page":"Plots on Manifolds","title":"ManifoldDiffusions.TorusScatterPlot","text":"TorusScatterPlot(X::T, Y::T, Z::T, ùïã::Torus) where {T<:AbstractArray}\n\nMake a scatterplot of coordinates X, Y, Z on ùïã.\n\n\n\n\n\n","category":"function"},{"location":"library/manifoldplots/#ManifoldDiffusions.TorusFullPlot","page":"Plots on Manifolds","title":"ManifoldDiffusions.TorusFullPlot","text":"TorusFullPlot(trace, data, target, ùïã::Torus; PlotUpdates = true)\n\nA plot of a trace of (for example MCMC-) updates with data and a target added. This function returns a plot on ùïã with a line trace, points data and a point target.\n\n\n\n\n\n","category":"function"},{"location":"library/manifoldplots/#","page":"Plots on Manifolds","title":"Plots on Manifolds","text":"ParaboloidPlot\nParaboloidScatterPlot\nParaboloidFullPlot","category":"page"},{"location":"library/manifoldplots/#ManifoldDiffusions.ParaboloidPlot","page":"Plots on Manifolds","title":"ManifoldDiffusions.ParaboloidPlot","text":"ParaboloidPlot(X::T , Y::T, Z::T, ‚Ñô::Paraboloid) where {T<:AbstractArray}\n\nPlot a function that takes values X, Y, Z on the Paraboloid ‚Ñô.\n\n\n\n\n\nParaboloidPlot(X::SamplePath{T}, ‚Ñô::Paraboloid) where {T}\n\nPlot a stochastic process of type SamplePath on ‚Ñô.\n\n\n\n\n\n","category":"function"},{"location":"library/manifoldplots/#ManifoldDiffusions.ParaboloidScatterPlot","page":"Plots on Manifolds","title":"ManifoldDiffusions.ParaboloidScatterPlot","text":"TorusScatterPlot(X::T, Y::T, Z::T, ‚Ñô::Paraboloid) where {T<:AbstractArray}\n\nMake a scatterplot of coordinates X, Y, Z on ‚Ñô.\n\n\n\n\n\n","category":"function"},{"location":"library/manifoldplots/#ManifoldDiffusions.ParaboloidFullPlot","page":"Plots on Manifolds","title":"ManifoldDiffusions.ParaboloidFullPlot","text":"ParaboloidFullPlot(trace, data, target, ‚Ñô::Paraboloid; PlotUpdates = true)\n\nA plot of a trace of (for example MCMC-) updates with data and a target added. This function returns a plot on ‚Ñô with a line trace, points data and a point target.\n\n\n\n\n\n","category":"function"}]
}
